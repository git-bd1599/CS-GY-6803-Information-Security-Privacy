#Assignment 2 Part 1

"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py
    
    """
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
 
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False
    # local (per object) reference to the underlying file
    self.lock = createlock()
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'
	
	#if filename is not valid
    if not isValidFileName(filename):
       exitall()
    
    # make the files and add 'SE' to the readat file...
    if create:
      self.Afile = openfile(self.Afn,create)
      self.Bfile = openfile(self.Bfn,create)
      
      try:
         if(self.lock.acquire(True)):
		    #check if new file created,then update with SE
			#else just open to read 
      	    if len(self.Bfile.readat(None,0))==0:
        	self.Afile.writeat('SE',0)
      except:
	    return 
      finally:
        self.lock.release()

    else:
      #check if file exists, then open file
      if self.Afn in listfiles():
	    self.Afile = openfile(self.Afn,create)
	    self.Bfile = openfile(self.Bfn,create)
  
  def writeat(self,data,offset):
   if offset < 0:
    return 
   try:   
     if(self.lock.acquire(True)):
      # Write the requested data to the B file using the sandbox's writeat call
      data_old = self.Bfile.readat(None,0)
    
      #check if new data in B file is shorter than old data
	  #create new file B to prevent partial overwrite 
      if len(data_old) > len(data):
        self.Bfile.close()
        removefile(self.Bfn)
        self.Bfile = openfile(self.Bfn,True)
    
      self.Bfile.writeat(data,offset)
   except:
       return
   finally:
       self.lock.release()
  
  def readat(self,bytes,offset):
   file.data = ""
   if offset < 0:
     return ""
       # Read from the A file using the sandbox's readat...
   try: 
       if(self.lock.acquire(True)):
         file.data = self.Afile.readat(bytes,offset)
   except:
	   return ""
   finally:
       self.lock.release()
       return file.data
  
  def close(self):
   try:
    if(self.lock.acquire(True)):
     data = self.Bfile.readat(None,0)
   #check if data in Bfile is valid
   #if vaild, write to Afile
   #else, write from Afile to Bfile
     if len(data)>=2 and data[0]=='S' and data[-1]=='E':
       self.Afile.writeat(data,0)
     else:
       self.Bfile.close()
       removefile(self.Bfn)
       self.Bfile = openfile(self.Bfn,True)
       self.Bfile.writeat(self.Afile.readat(None,0),0)
    
    self.Afile.close()
    self.Bfile.close()
   except : 
       return
   finally:
      self.lock.release()
	
def ABopenfile(filename, create):
  return ABFile(filename,create)
  
def isValidFileName(filename):
    """for allowing  a combination of lowercase and numbers 
	   and hyphens, underscore and period use pattern matching
	   like this [a-z0-9-_\.]+$"""
	
    if(filename[0]=='.' 
	    or filename=='.' 
		or filename=='..' 
		or filename==''
		or len(filename)>120):
		   return False
    else:	
	       return True

# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()